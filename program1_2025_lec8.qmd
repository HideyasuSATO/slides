---
title: "第８回 データ抽出"
subtitle: "プログラミング演習Ⅰ"
author: 
  name: "佐藤 秀保"
  email: "sato0035@toyo.jp"
format:
  revealjs:
    self-contained: true
    theme: simple
    slide-number: true
    css: styles.css
    transition: slide
editor: visual
---

------------------------------------------------------------------------

## 先週までの内容

-   データは，①型，➁長さ，**③属性**の３つの特徴を有する

    -   ①型：logical, integer, numeric, character

    -   ➁長さ：要素の数

    -   **③属性**：名前，次元，**クラス**など

        -   **クラス**：メタデータ．例えば[**因子factor**]{.underline}

        -   クラスが因子のとき，[**水準level**]{.underline}というクラスも備わる

        -   クラスが因子のとき，値には連番が付与される

------------------------------------------------------------------------

-   因子クラスをもつアトミックベクトル

    -   アトミックベクトルにfactor関数を適用

    -   キーワード引数でlevelsをとり，付与する連番と値の対応関係を指定

```{r}
#| echo: true
#| eval: false
seiseki <- c("low","high", "middle", "middle", "high", "low", "middle")
seiseki_f <- factor(seiseki, levels = c("low", "middle", "high"))
```

-   メリット：文字データのまま順番を考慮した作図が可能等

※注意：因子クラスのアトミックベクトルは，[**levelsにとった値以外の値を含むことができない**]{.underline}．

------------------------------------------------------------------------

## 準備

1.  [Posit Cloud](https://posit.cloud/)へ（日本語訳しないことを推奨）

2.  作成済みのプロジェクトをクリック

3.  先週使用のスクリプトをすべて閉じる

4.  新しくスクリプトを作成

5.  作成したスクリプトを保存：名前は「lecture7」

6.  ほうきボタンでオブジェクトを削除

授業中のコードはすべてスクリプトに書き実行すること

------------------------------------------------------------------------

## データ抽出

-   入手したデータをそのまま扱うことはまれ

-   目的に応じ，一部の必要なデータを抽出し用いることが一般的

-   アトミックベクトルやリストからデータを抽出する方法を学習

------------------------------------------------------------------------

## データ抽出：アトミックベクトル

-   ６つの抽出方法

    1.  **正の整数による指定**
    2.  **負の整数による指定**
    3.  [**論理値による指定**]{style="color: orange;"}
    4.  無指定
    5.  0による指定
    6.  **文字列による指定**

------------------------------------------------------------------------

### ①正の整数による指定

-   アトミックベクトルの後に大括弧\[ \]を付しその引数に要素の番号を指定

```{r}
#| echo: true
#| eval: false
x <- c(1, 10 ,100 ,1000)
x[2] #2コ目を抽出
y <- x[2] #2コ目を保存
```

------------------------------------------------------------------------

-   複数の要素を抽出する場合はアトミックベクトルで指定

```{r}
#| echo: true
#| eval: false
x[c(2, 3)] #2コ目と3コ目を抽出
x[c(3, 2)] #3コ目と2コ目の順で抽出
x[c(4, 4, 4)] #4コ目を3コ抽出
```

-   ちなみに小数で指定しようとすると小数切り捨てで指定される

```{r}
#| echo: true
#| eval: false
x[c(2.3, 3.8)] #2コ目と3コ目を抽出
```

------------------------------------------------------------------------

-   代入で元のデータの一部を上書き可

```{r}
#| echo: true
#| eval: false
x[2] <- 999 #2コ目を上書き
x #呼び出して中身を確認
```

------------------------------------------------------------------------

### ➁負の整数による指定

-   大括弧\[ \]の引数の値にマイナスをつければ，[**その番号以外**]{.underline}の要素を抽出

```{r}
#| echo: true
#| eval: false
x[-2] #2コ目以外
x[-c(2, 3)] #2コ目,3コ目以外
x[-c(3, 2)] #上に同じ
x[c(-3, 2)] #エラー
```

------------------------------------------------------------------------

### [③論理値による指定]{style="color: orange;"}

-   大括弧\[ \]の引数にlogicalのアトミックベクトルをとり，TRUEに対応する要素のみを抽出

```{r}
#| echo: true
#| eval: false
x[c(TRUE, TRUE, TRUE, FALSE)] #4コ目以外を抽出
x[c(T, T, T, F)] #4コ目以外を抽出
```

------------------------------------------------------------------------

#### 演習

いま，３つの企業についてそれぞれ，①企業名，➁企業の利潤，③食品企業か否か，のデータがアトミックベクトルとして保存されている．

```{r}
#| echo: true
#| eval: false
firm_name <- c("企業A", "企業B", "企業C")
profit <- c(100, 200, 500)
food_firm <- c(T, F, T)
```

1.  企業名について，食品企業のもののみをアトミックベクトルとして抽出せよ

2.  利潤について，食品企業のもののみをアトミックベクトルとして抽出せよ

------------------------------------------------------------------------

### ④無指定，⑤0による指定

-   大括弧\[ \]の引数に何も入れないと，元のアトミックベクトルが返る

-   大括弧\[ \]の引数に0を入れると，長さゼロのアトミックベクトルが返る

```{r}
#| echo: true
#| eval: false
x[] #xが返る
x[0] #空のアトミックベクトルが返る
```

------------------------------------------------------------------------

### ⑥文字列による指定

-   名前属性をもつアトミックベクトルの要素を名前で抽出
-   大括弧\[ \]の引数に名前を文字列でとり指定

```{r}
#| echo: true
#| eval: false
z <- c(a = 1, b = 10, c = 100, d = 1000) #名前属性アトミックベクトル
z["b"] #bの値
z[c("b", "c")] #bの値とcの値を抽出
z[c("c", "b")] #cの値とbの値の順で抽出
z[c("a", "a", "a")] #aの値を3コ抽出
```

------------------------------------------------------------------------

## データ抽出：リスト

-   リストのデータ抽出はややこしい

    -   リストの後に大括弧\[ \]を付しその引数に要素の番号を指定すると，[**リストとして抽出**]{.underline}

    -   大括弧\[ \]を２つ重ねると，[**アトミックベクトルとして抽出**]{.underline}

```{r}
#| echo: true
#| eval: false
list_x <- list(1, 10, 100, 1000)
list_x[2] #2コ目をリストで抽出
list_x[[2]] #2コ目をアトミックベクトルで抽出
```

------------------------------------------------------------------------

### 入れ子の場合

-   リストの中にあるアトミックベクトルからさらに特定の要素をアトミックベクトルとして抽出したい場合は，大括弧\[ \]を横に追加していく

```{r}
#| echo: true
#| eval: false
list_y <- list(c(1, 10), c(100, 1000))
list_y[1] #1,10から成るリスト
list_y[[1]] #1,10から成るアトミックベクトル
list_y[[1]][2] #10から成るアトミックベクトル
```

------------------------------------------------------------------------

-   リストの中にあるリストからさらに特定の要素をアトミックベクトルとして抽出したい場合は，大括弧\[\[ \]\]を横に追加していく

```{r}
#| echo: true
#| eval: false
list_z <- list(list(1, 10), list(100, 1000))
list_z[1] #1,10から成るリストのリスト（入れ子のまま）
list_z[[1]] #1,10から成るリスト
list_z[[1]][2] #10から成るリスト
list_z[[1]][[2]] #10から成るリスト
```

------------------------------------------------------------------------

### 演習（もうやめて！とっくに私のライフはゼロよ！）

以下のコードを実行した場合，何が返るか予想せよ．

```{r}
#| echo: true
#| eval: false
example1 <- list(TRUE, 2.4, list(10, c(100, 1000)))
example1[[3]][[2]][2]
```

------------------------------------------------------------------------

## 課題

-   ACEの小テスト：「第８回」

-   ACEのレポート：「第８回」

    -   ローカルに保存したlecture8.Rを提出
